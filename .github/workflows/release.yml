name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build for Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build with Docker
        run: |
          # Create Dockerfile for build
          cat > Dockerfile << 'EOF'
          FROM ubuntu:20.04

          # Prevent timezone prompts during package installation
          ENV DEBIAN_FRONTEND=noninteractive

          # Install build dependencies
          RUN apt-get update && apt-get install -y \
              build-essential \
              pkg-config \
              libssl-dev \
              curl \
              git \
              && rm -rf /var/lib/apt/lists/*

          # Install Rust
          RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          ENV PATH="/root/.cargo/bin:${PATH}"

          # Set working directory
          WORKDIR /build

          # Copy source code
          COPY . .

          # Build the project
          RUN cargo build --release

          # Create Debian package
          ARG VERSION
          RUN mkdir -p debian/DEBIAN
          RUN echo "Package: repo-dump" > debian/DEBIAN/control
          RUN echo "Version: ${VERSION}" >> debian/DEBIAN/control
          RUN echo "Architecture: amd64" >> debian/DEBIAN/control
          RUN echo "Maintainer: ngochai285nd@gmail.com" >> debian/DEBIAN/control
          RUN echo "Description: A tool to dump the source code of a repository" >> debian/DEBIAN/control
          RUN echo "Homepage: https://github.com/haiphamcoder/repo-dump" >> debian/DEBIAN/control
          RUN mkdir -p debian/usr/local/bin
          RUN cp target/release/repo-dump debian/usr/local/bin/
          RUN dpkg-deb --build debian repo-dump-linux-x86_64.deb
          EOF

          # Build Docker image and create package
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          docker build --build-arg VERSION="$VERSION" -t repo-dump-builder .
          docker create --name builder repo-dump-builder
          docker cp builder:/build/repo-dump-linux-x86_64.deb .
          docker rm builder

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo-dump-linux-x86_64.deb
          path: repo-dump-linux-x86_64.deb

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: repo-dump-linux-x86_64.deb
          path: .

      - name: Generate changelog
        id: changelog
        run: |
          # Get the version from the tag
          VERSION=${GITHUB_REF#refs/tags/}
          
          # Create release notes
          echo "# Release $VERSION" > release_changelog.md
          echo "" >> release_changelog.md
          echo "## Changes" >> release_changelog.md
          echo "" >> release_changelog.md
          
          # Get commit messages since last tag
          git log --pretty=format:"* %s" $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD >> release_changelog.md
          
          # Update CHANGELOG.md
          cat release_changelog.md > temp_changelog.md
          echo "" >> temp_changelog.md
          cat CHANGELOG.md >> temp_changelog.md
          mv temp_changelog.md CHANGELOG.md
          
          # Create a commit with the updated changelog
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "chore: update changelog for $VERSION"
          git push origin main

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: release_changelog.md
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./repo-dump-linux-x86_64.deb
          asset_name: repo-dump-linux-x86_64.deb
          asset_content_type: application/vnd.debian.binary-package 