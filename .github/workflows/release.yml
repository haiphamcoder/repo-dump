name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: "repo-dump-linux-x86_64.deb"
            package_type: "deb"
          - os: windows-latest
            artifact_name: "repo-dump-windows-x86_64.exe"
            package_type: "exe"
          - os: macos-latest
            artifact_name: "repo-dump-macos-x86_64.dmg"
            package_type: "dmg"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential pkg-config libssl-dev
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew install pkg-config openssl
          fi
      - name: Build
        run: cargo build --release
      - name: Create package
        run: |
          if [ "${{ matrix.package_type }}" = "deb" ]; then
            # Create Debian package
            mkdir -p debian/DEBIAN
            echo "Package: repo-dump" > debian/DEBIAN/control
            echo "Version: ${{ github.ref_name }}" >> debian/DEBIAN/control
            echo "Architecture: amd64" >> debian/DEBIAN/control
            echo "Maintainer: ngochai285nd@gmail.com" >> debian/DEBIAN/control
            echo "Description: A tool to dump the source code of a repository" >> debian/DEBIAN/control
            echo "Homepage: https://github.com/haiphamcoder/repo-dump" >> debian/DEBIAN/control
            mkdir -p debian/usr/local/bin
            cp target/release/repo-dump debian/usr/local/bin/
            dpkg-deb --build debian ${{ matrix.artifact_name }}
          elif [ "${{ matrix.package_type }}" = "exe" ]; then
            # Create Windows package
            mkdir -p windows/repo-dump
            cp target/release/repo-dump.exe windows/repo-dump/
            zip -r ${{ matrix.artifact_name }} windows
          elif [ "${{ matrix.package_type }}" = "dmg" ]; then
            # Create macOS package
            brew install create-dmg
            mkdir -p dmg
            cp target/release/repo-dump dmg/
            create-dmg \
              --volname "Repo Dump" \
              --window-pos 200 120 \
              --window-size 800 400 \
              --icon-size 100 \
              --icon "repo-dump" 200 190 \
              --hide-extension "repo-dump" \
              --app-drop-link 600 185 \
              "${{ matrix.artifact_name }}" dmg
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}
  
  